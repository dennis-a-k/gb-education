(()=>{"use strict";new Vue({el:"#e-shop",components:{cart:{data:()=>({showCart:!1,cartItems:[]}),components:{"cart-item":{props:["cartItem","img"],template:'<div class="cart-item">\n                <button class="minus-plus" @click="$emit(\'add-product\', cartItem)">&#43;</button>\n                <p>{{ cartItem.product_name }}</p>\n                <img :src="cartItem.img" :alt="cartItem.product_name">\n                <span id="product-quantity">{{ cartItem.quantity }} шт.</span>\n                <p id="product-price">{{ cartItem.quantity * cartItem.price }} ₽</p>\n                <button class="minus-plus"  @click="$emit(\'remove\', cartItem)">&#8722;</button>\n            </div>'}},methods:{addProduct(t){let e=this.cartItems.find((e=>e.id_product===t.id_product));if(e)this.$parent.putJson(`/api/cart/${t.id_product}/${t.product_name}`,{quantity:1}).then((t=>{t.result&&e.quantity++}));else{let e=Object.assign({quantity:1},t);this.$parent.postJson(`api/cart/${t.id_product}/${t.product_name}`,e).then((t=>{t.result&&this.cartItems.push(e)}))}},remove(t){t.quantity>1?this.$parent.putJson(`/api/cart/${t.id_product}/${t.product_name}`,{quantity:-1}).then((e=>{e.result&&t.quantity--})):this.$parent.delJson(`/api/cart/${t.id_product}/${t.product_name}`,t).then((e=>{e.result?this.cartItems.splice(this.cartItems.indexOf(t),1):console.log("error")}))}},mounted(){this.$parent.getJson("/api/cart").then((t=>{for(let e of t)this.cartItems.push(e)}))},template:'<div>\n                <button class="btn-cart btn" type="button" @click="showCart = !showCart" v-if="cartItems.length">\n                    <div class="count">{{ this.cartItems.reduce((summ, item) => summ + item.quantity, 0) }}</div>\n                    Корзина\n                </button>\n                <button class="btn-cart btn-no" type="button" @click="showCart = !showCart" v-else>\n                    Корзина\n                </button>\n                <div class="cart-block" v-show="showCart">\n                    <p class="products__no" v-if="!cartItems.length">Корзина пуста</p>\n                    <p v-if="cartItems.length">\n                        Сумма покупок: \n                    <span id="cost">{{ this.cartItems.reduce((summ, item) => summ + item.quantity*item.price, 0) }} ₽</span></p>\n                    <hr v-if="cartItems.length">\n                    <cart-item \n                        v-for="item of cartItems" \n                        :key="item.id_product"\n                        :cart-item="item"\n                        :img="item.imgCart"\n                        @add-product="addProduct"\n                        @remove="remove">\n                    </cart-item>\n                </div>\n            </div>'},products:{data:()=>({catalogUrl:"/catalogData.json",products:[],filtered:[]}),components:{product:{props:["product","img"],template:'<div class="product-item">\n                <a href="#"><img :src="img" :alt="product.product_name"></a>\n                <a href="#"><h3>{{ product.product_name }}</h3></a>\n                <p>{{ product.price }} ₽</p>\n                <button class="buy-btn btn" @click="$root.$refs.cart.addProduct(product)">\n                    Купить\n                </button>\n            </div>'}},methods:{filter(t){let e=new RegExp(t,"i");this.filtered=this.products.filter((t=>e.test(t.product_name)))}},mounted(){this.$parent.getJson("/api/products").then((t=>{for(let e of t)this.products.push(e),this.filtered.push(e)}))},template:'<div class="products">\n                <p class="products__no" v-if="!products.length">Нет данных</p>\n                <product \n                    v-for="product of filtered" \n                    :key="product.id_product"\n                    :product="product"\n                    :img="product.img"\n                    >\n                </product>\n            </div>'},error:{data:()=>({text:""}),methods:{setText(t){this.text=t}},template:'<div class="error-block" v-if="text">\n                    <p class="error-msg">\n                    <button class="close-btn" @click="setText(\'\')">&times;</button>\n                    {{text}}\n                    </p>\n                </div>'},search:{data:()=>({userSearch:""}),template:'<form action="#" method="post" class="search-form" @submit.prevent="$parent.$refs.products.filter(userSearch)">\n               <input type="text" class="search-field" v-model="userSearch">\n               <button class="btn-search" type="submit">\n                  <img src="/img/search.png" alt="search">\n               </button>\n            </form>'}},methods:{getJson(t){return fetch(t).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))},postJson(t,e){return fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))},putJson(t,e){return fetch(t,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))},delJson(t,e){return fetch(t,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((t=>t.json())).catch((t=>this.$refs.error.setText(t)))}}})})();